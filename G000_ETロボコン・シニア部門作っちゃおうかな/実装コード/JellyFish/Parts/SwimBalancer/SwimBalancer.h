/*
	[NOTE] This file is automatically generated. Please do not hand-coded.
  
	Template:C++,CompositionType.h.xsl
	Generated Date:2017/01/23 13:47:44
	Generater Name:BricRoboGen Ver:1.7.10.351  
 */
#ifndef SwimBalancer_H
#define SwimBalancer_H

#include "../../../Common/Parts/PidInt8/PidInt8.h"
#include "SwimCmd.h"
#include "../../../Common/JellyFish/JellyFishNavi.h"
#include "../../../BricRoboSketch/ValueIF.h"
#include "../../../Common/PositionIF.h"

/* 実装のテンプレートとして利用してください
#include "stdafx.h"
#include "SwimBalancer.h"

void SwimBalancer::ConfigParam(int16_t emergencyPower)
{
}
  void SwimBalancer::Run()
{
	SwimCmd cmd;
    Rte_Read_cmd(cmd);
	JellyFishNavi curNavi;
    Rte_Write_curNavi(curNavi);
	ValueIF depth;
    Rte_Read_depth(depth);
	ValueIF front;
    Rte_Write_front(front);
	ValueIF left;
    Rte_Write_left(left);
	PositionIF pos;
    Rte_Read_pos(pos);
	ValueIF rear;
    Rte_Write_rear(rear);
	ValueIF right;
    Rte_Write_right(right);

}
*/


/**

@author ike
@version 1.0
*/
class SwimBalancer
{
	/*
	User Defined Attribute
	*/
	/**
	緊急時にモーターに与えるパワー値。
ｱ1000
	*/
	private: int16_t _emergencyPower;
	/**
	方向のオフセット値
	*/
	private: int16_t _offsetDir;
	/**
	水深のオフセット値。
	*/
	private: int16_t _offsetDepth;
	/**
	ロールのオフセット値。
	*/
	private: int16_t _offsetRoll;
	/**
	ピッチのオフセット値。
	*/
	private: int16_t _offsetPitch;
	/*
	User Defined Method
	*/
	/*
	Auto Generated Attribute
	*/
	/**
	
	*/
	public: PidInt8 PID_DEPTH;
	/**
	
	*/
	public: PidInt8 PID_DIR;
	/**
	
	*/
	public: PidInt8 PID_PITCH;
	/**
	
	*/
	public: PidInt8 PID_ROLL;
	/*
	Auto Generated Method
	*/
	/**
	ConfigParam
	@param emergencyPower	
	*/
	public: void ConfigParam(int16_t emergencyPower);
	/*
	RunnableEntity
	*/
	/**
	
	*/
	public: void Run();
	/*
	Port
	*/
	/**
	
	*/
	/* Rte_Read_cmd(SwimCmd) */
	BricRoboPortRead(SwimCmd,cmd);
	/**
	現在の姿勢を表すナビゲーション値
	*/
	/* Rte_Write_curNavi(JellyFishNavi) */
	BricRoboPortWrite(JellyFishNavi,curNavi);
	/**
	
	*/
	/* Rte_Read_depth(ValueIF) */
	BricRoboPortRead(ValueIF,depth);
	/**
	フロントモーターESCの出力値
	*/
	/* Rte_Write_front(ValueIF) */
	BricRoboPortWrite(ValueIF,front);
	/**
	左モーターESCの出力値
	*/
	/* Rte_Write_left(ValueIF) */
	BricRoboPortWrite(ValueIF,left);
	/**
	
	*/
	/* Rte_Read_pos(PositionIF) */
	BricRoboPortRead(PositionIF,pos);
	/**
	リヤモーターESCの出力値
	*/
	/* Rte_Write_rear(ValueIF) */
	BricRoboPortWrite(ValueIF,rear);
	/**
	右モーターESCの出力値
	*/
	/* Rte_Write_right(ValueIF) */
	BricRoboPortWrite(ValueIF,right);
};

/* Procedure Template
*/

#endif /* SwimBalancer_H */
