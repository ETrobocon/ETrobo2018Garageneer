/*
	[NOTE] This file is automatically generated. Please do not hand-coded.
  
	Template:C++,CompositionType.h.xsl
	Generated Date:2017/01/23 13:47:44
	Generater Name:BricRoboGen Ver:1.7.10.351  
 */
#ifndef Controller_H
#define Controller_H

#include "../SwimBalancer/SwimCmd.h"
#include "../../../Common/JellyFish/JellyFishCommandIF.h"
#include "../../../Common/JellyFish/JellyFishNavi.h"
#include "../../../BricRoboSketch/ValueIF.h"
#include "../../../Common/JellyFish/JellyFishNaviIF.h"
#include "../../../Common/Parts/LedDriverMini/LedMiniPattern.h"

/* 実装のテンプレートとして利用してください
#include "stdafx.h"
#include "Controller.h"

void Controller::ConfigParam(int16_t flood, int16_t offlineJudgeCnt)
{
}
  void Controller::RunRcv()
{
	SwimCmd cmd;
    Rte_Write_cmd(cmd);
	JellyFishCommandIF command;
    Rte_Receive_command(command);
	JellyFishNavi curNavi;
    Rte_Read_curNavi(curNavi);
	ValueIF floodAlarm;
    Rte_Read_floodAlarm(floodAlarm);
	ValueIF led;
    Rte_Send_led(led);
	JellyFishNaviIF navi;
    Rte_Write_navi(navi);

}
void Controller::RunSend()
{
	SwimCmd cmd;
    Rte_Write_cmd(cmd);
	JellyFishCommandIF command;
    Rte_Receive_command(command);
	JellyFishNavi curNavi;
    Rte_Read_curNavi(curNavi);
	ValueIF floodAlarm;
    Rte_Read_floodAlarm(floodAlarm);
	ValueIF led;
    Rte_Send_led(led);
	JellyFishNaviIF navi;
    Rte_Write_navi(navi);

}
*/


/**
ロボット全体を制御する。
制御コマンドが一定時間以内に届かない場合には回避行動を取る。
@author eguchi
@version 1.0
*/
class Controller
{
	/*
	User Defined Attribute
	*/
	/**
	前回のコマンド。
	*/
	private: SwimCmd _swimCmd;
	/**
	
	*/
	private: int16_t _floodAlarm;
	/**
	
	*/
	private: int16_t _curFlood;
	/**
	通信途絶した現在までのカウント
	*/
	private: int16_t _offlineCnt;
	/**
	通信が途絶して、OFFラインとみなすまでの回数。
25msを１回と想定。
	*/
	private: int16_t _offlineJudgeCnt;
	/**
	状態ビット
	*/
	private: uint8_t _fishStatus;
	/*
	User Defined Method
	*/
	/*
	Auto Generated Attribute
	*/
	/*
	Auto Generated Method
	*/
	/**
	ConfigParam
	@param flood	漏水判定するしきい値
	@param offlineJudgeCnt	通信途絶と判断するカウント数
	*/
	public: void ConfigParam(int16_t flood, int16_t offlineJudgeCnt);
	/*
	RunnableEntity
	*/
	/**
	
	*/
	public: void RunRcv();
	/**
	
	*/
	public: void RunSend();
	/*
	Port
	*/
	/**
	
	*/
	/* Rte_Write_cmd(SwimCmd) */
	BricRoboPortWrite(SwimCmd,cmd);
	/**
	ロボットを操縦するコマンド
	*/
	/* Rte_Receive_command(JellyFishCommandIF) */
	BricRoboPortReceive(JellyFishCommandIF,command);
	/**
	
	*/
	/* Rte_Read_curNavi(JellyFishNavi) */
	BricRoboPortRead(JellyFishNavi,curNavi);
	/**
	浸水警告
	*/
	/* Rte_Read_floodAlarm(ValueIF) */
	BricRoboPortRead(ValueIF,floodAlarm);
	/**
	
	*/
	/* Rte_Send_led(ValueIF) */
	BricRoboPortSend(ValueIF,led);
	/**
	ロボットの状態
	*/
	/* Rte_Write_navi(JellyFishNaviIF) */
	BricRoboPortWrite(JellyFishNaviIF,navi);
};

/* Procedure Template
*/

#endif /* Controller_H */
