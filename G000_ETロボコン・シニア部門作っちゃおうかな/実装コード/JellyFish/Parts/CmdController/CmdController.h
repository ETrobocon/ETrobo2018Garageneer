/*
	[NOTE] This file is automatically generated. Please do not hand-coded.
  
	Template:C++,CompositionType.h.xsl
	Generated Date:2017/01/23 13:47:44
	Generater Name:BricRoboGen Ver:1.7.10.351  
 */
#ifndef CmdController_H
#define CmdController_H

#include "StabiIF.h"
#include "../../../BricRoboSketch/ValueIF.h"
#include "../../../Common/JellyFish/JellyFishCommandIF.h"
#include "../SwimController/SwimControllerIF.h"
#include "../../../Common/JellyFish/JellyFishNavi.h"
#include "../../../Common/JellyFish/JellyFishNaviIF.h"
#include "../../../Common/PidParamIF.h"
#include "../../../Common/Parts/LedDriverMini/LedMiniPattern.h"

/* 実装のテンプレートとして利用してください
#include "stdafx.h"
#include "CmdController.h"

void CmdController::ConfigParam(int16_t flood, int16_t offlineJudgeCnt)
{
}
  void CmdController::RunRcv()
{
	ValueIF battery;
    Rte_Read_battery(battery);
	JellyFishCommandIF command;
    Rte_Receive_command(command);
	SwimControllerIF ctrl;
    Rte_Write_ctrl(ctrl);
	JellyFishNavi curNavi;
    Rte_Read_curNavi(curNavi);
	ValueIF deadZoneDiveL;
    Rte_Send_deadZoneDiveL(deadZoneDiveL);
	ValueIF deadZoneDiveR;
    Rte_Send_deadZoneDiveR(deadZoneDiveR);
	ValueIF deadZoneLeft;
    Rte_Send_deadZoneLeft(deadZoneLeft);
	ValueIF deadZoneRight;
    Rte_Send_deadZoneRight(deadZoneRight);
	ValueIF floodAlarm;
    Rte_Read_floodAlarm(floodAlarm);
	ValueIF led;
    Rte_Send_led(led);
	JellyFishNaviIF navi;
    Rte_Write_navi(navi);
	PidParamIF pidParamDep;
    Rte_Send_pidParamDep(pidParamDep);
	PidParamIF pidParamDir;
    Rte_Send_pidParamDir(pidParamDir);
	ValueIF resetNavi;
    Rte_Send_resetNavi(resetNavi);
	StabiIF stabi;
    Rte_Write_stabi(stabi);

}
void CmdController::RunSend()
{
	ValueIF battery;
    Rte_Read_battery(battery);
	JellyFishCommandIF command;
    Rte_Receive_command(command);
	SwimControllerIF ctrl;
    Rte_Write_ctrl(ctrl);
	JellyFishNavi curNavi;
    Rte_Read_curNavi(curNavi);
	ValueIF deadZoneDiveL;
    Rte_Send_deadZoneDiveL(deadZoneDiveL);
	ValueIF deadZoneDiveR;
    Rte_Send_deadZoneDiveR(deadZoneDiveR);
	ValueIF deadZoneLeft;
    Rte_Send_deadZoneLeft(deadZoneLeft);
	ValueIF deadZoneRight;
    Rte_Send_deadZoneRight(deadZoneRight);
	ValueIF floodAlarm;
    Rte_Read_floodAlarm(floodAlarm);
	ValueIF led;
    Rte_Send_led(led);
	JellyFishNaviIF navi;
    Rte_Write_navi(navi);
	PidParamIF pidParamDep;
    Rte_Send_pidParamDep(pidParamDep);
	PidParamIF pidParamDir;
    Rte_Send_pidParamDir(pidParamDir);
	ValueIF resetNavi;
    Rte_Send_resetNavi(resetNavi);
	StabiIF stabi;
    Rte_Write_stabi(stabi);

}
*/


/**
マルチローター型でない泳ぐ系のコマンド解析。
@author ike
@version 1.0
*/
class CmdController
{
	/*
	User Defined Attribute
	*/
	/**
	
	*/
	private: int16_t _floodAlarm;
	/**
	
	*/
	private: SwimControllerIF _ctrl;
	/**
	
	*/
	private: int16_t _curFlood;
	/**
	スタビライザーのON/OFF
	*/
	private: StabiIF _stabi;
	/**
	通信途絶した現在までのカウント
	*/
	private: int16_t _offlineCnt;
	/**
	通信が途絶して、OFFラインとみなすまでの回数。
25msを１回と想定。
	*/
	private: int16_t _offlineJudgeCnt;
	/**
	状態ビット
	*/
	private: uint8_t _fishStatus;
	/*
	User Defined Method
	*/
	/*
	Auto Generated Attribute
	*/
	/*
	Auto Generated Method
	*/
	/**
	ConfigParam
	@param flood	漏水判定するしきい値
	@param offlineJudgeCnt	通信途絶と判断するカウント数
	*/
	public: void ConfigParam(int16_t flood, int16_t offlineJudgeCnt);
	/*
	RunnableEntity
	*/
	/**
	
	*/
	public: void RunRcv();
	/**
	
	*/
	public: void RunSend();
	/*
	Port
	*/
	/**
	
	*/
	/* Rte_Read_battery(ValueIF) */
	BricRoboPortRead(ValueIF,battery);
	/**
	
	*/
	/* Rte_Receive_command(JellyFishCommandIF) */
	BricRoboPortReceive(JellyFishCommandIF,command);
	/**
	
	*/
	/* Rte_Write_ctrl(SwimControllerIF) */
	BricRoboPortWrite(SwimControllerIF,ctrl);
	/**
	
	*/
	/* Rte_Read_curNavi(JellyFishNavi) */
	BricRoboPortRead(JellyFishNavi,curNavi);
	/**
	
	*/
	/* Rte_Send_deadZoneDiveL(ValueIF) */
	BricRoboPortSend(ValueIF,deadZoneDiveL);
	/**
	
	*/
	/* Rte_Send_deadZoneDiveR(ValueIF) */
	BricRoboPortSend(ValueIF,deadZoneDiveR);
	/**
	
	*/
	/* Rte_Send_deadZoneLeft(ValueIF) */
	BricRoboPortSend(ValueIF,deadZoneLeft);
	/**
	
	*/
	/* Rte_Send_deadZoneRight(ValueIF) */
	BricRoboPortSend(ValueIF,deadZoneRight);
	/**
	
	*/
	/* Rte_Read_floodAlarm(ValueIF) */
	BricRoboPortRead(ValueIF,floodAlarm);
	/**
	
	*/
	/* Rte_Send_led(ValueIF) */
	BricRoboPortSend(ValueIF,led);
	/**
	
	*/
	/* Rte_Write_navi(JellyFishNaviIF) */
	BricRoboPortWrite(JellyFishNaviIF,navi);
	/**
	
	*/
	/* Rte_Send_pidParamDep(PidParamIF) */
	BricRoboPortSend(PidParamIF,pidParamDep);
	/**
	
	*/
	/* Rte_Send_pidParamDir(PidParamIF) */
	BricRoboPortSend(PidParamIF,pidParamDir);
	/**
	ナビゲーションをリセットする。値により次から使うデバイスが変わる。
０＝Gyro
１＝Compass
	*/
	/* Rte_Send_resetNavi(ValueIF) */
	BricRoboPortSend(ValueIF,resetNavi);
	/**
	0以外のときスタビライザーON
ビット組み合わせで水平垂直を別々に指定する。
１：水平
２：垂直
３：水平垂直両方
	*/
	/* Rte_Write_stabi(StabiIF) */
	BricRoboPortWrite(StabiIF,stabi);
};

/* Procedure Template
*/

#endif /* CmdController_H */
