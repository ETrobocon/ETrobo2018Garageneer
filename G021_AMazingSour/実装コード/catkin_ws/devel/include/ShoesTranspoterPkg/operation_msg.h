// Generated by gencpp from file ShoesTranspoterPkg/operation_msg.msg
// DO NOT EDIT!


#ifndef SHOESTRANSPOTERPKG_MESSAGE_OPERATION_MSG_H
#define SHOESTRANSPOTERPKG_MESSAGE_OPERATION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ShoesTranspoterPkg
{
template <class ContainerAllocator>
struct operation_msg_
{
  typedef operation_msg_<ContainerAllocator> Type;

  operation_msg_()
    : trans_id(0)
    , trans_shoes(0)
    , trans_location(0)  {
    }
  operation_msg_(const ContainerAllocator& _alloc)
    : trans_id(0)
    , trans_shoes(0)
    , trans_location(0)  {
  (void)_alloc;
    }



   typedef uint8_t _trans_id_type;
  _trans_id_type trans_id;

   typedef uint8_t _trans_shoes_type;
  _trans_shoes_type trans_shoes;

   typedef uint8_t _trans_location_type;
  _trans_location_type trans_location;





  typedef boost::shared_ptr< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> const> ConstPtr;

}; // struct operation_msg_

typedef ::ShoesTranspoterPkg::operation_msg_<std::allocator<void> > operation_msg;

typedef boost::shared_ptr< ::ShoesTranspoterPkg::operation_msg > operation_msgPtr;
typedef boost::shared_ptr< ::ShoesTranspoterPkg::operation_msg const> operation_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ShoesTranspoterPkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/home/pi/roscatkin_ws/install_isolated/share/std_msgs/cmake/../msg'], 'ShoesTranspoterPkg': ['/home/pi/catkin_ws/src/ShoesTranspoterPkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd4c59e07b6472420cb2af9225f671f5";
  }

  static const char* value(const ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd4c59e07b647242ULL;
  static const uint64_t static_value2 = 0x0cb2af9225f671f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ShoesTranspoterPkg/operation_msg";
  }

  static const char* value(const ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 trans_id\n\
uint8 trans_shoes\n\
uint8 trans_location\n\
";
  }

  static const char* value(const ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trans_id);
      stream.next(m.trans_shoes);
      stream.next(m.trans_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct operation_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ShoesTranspoterPkg::operation_msg_<ContainerAllocator>& v)
  {
    s << indent << "trans_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trans_id);
    s << indent << "trans_shoes: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trans_shoes);
    s << indent << "trans_location: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.trans_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHOESTRANSPOTERPKG_MESSAGE_OPERATION_MSG_H
